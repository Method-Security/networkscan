name: Reusable Build
on:
  workflow_call:
    inputs:
      goreleaser_config:
        description: "file path to GoReleaser config"
        required: true
        type: string
      goreleaser_options:
        description: "GoReleaser options separated by spaces"
        default: ""
        required: false
        type: string

env:
  GO_VERSION: "1.22"

jobs:
  prepare-linux:
    name: Prepare Linux
    runs-on: ubuntu-latest
    env:
      DOCKER_CLI_EXPERIMENTAL: "enabled"
    permissions:
      contents: read
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to ghcr.io registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout code
        uses: actions/checkout@v4.1.6
        with:
          fetch-depth: 0

      - name: Build ARM64 Builder Image
        shell: bash
        run: docker buildx build . --platform linux/arm64 --load --tag armbuilder -f Dockerfile.builder

      - name: Build AMD64 Builder Image
        shell: bash
        run: docker buildx build . --platform linux/amd64 --load --tag amdbuilder -f Dockerfile.builder

      - name: Build ARM64 Image
        shell: bash
        run: docker run -v .:/app/networkscan -e GOARCH=arm64 -e GOOS=linux -e GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }} -e GORELEASER_KEY=${{ secrets.GORELEASER_KEY }} --rm armbuilder goreleaser build --single-target -f .goreleaser/goreleaser-build.yml ${{ inputs.goreleaser_options}}

      - name: Build AMD64 Image
        shell: bash
        run: docker run -v .:/app/networkscan -e GOARCH=amd64 -e GOOS=linux -e GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }} -e GORELEASER_KEY=${{ secrets.GORELEASER_KEY }} --rm amdbuilder goreleaser build --single-target -f .goreleaser/goreleaser-build.yml ${{ inputs.goreleaser_options}}

      - uses: actions/upload-artifact@v4
        with:
          name: linux-dist
          path: dist/
          retention-days: 7

  prepare:
    name: Prepare
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    env:
      DOCKER_CLI_EXPERIMENTAL: "enabled"
      flags: ""
    permissions:
      contents: read
    steps:
      - name: Install Dependencies
        run: |
          brew update
          brew install libpcap
          echo "LD_LIBRARY_PATH=$(brew --prefix)/Cellar/libpcap/*/lib" >> $GITHUB_ENV
        if: matrix.os == 'macos-latest'

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        if: matrix.os == 'ubuntu-latest'

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
        if: matrix.os == 'ubuntu-latest'

      - name: Login to ghcr.io registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
        if: matrix.os != 'macos-latest'

      - name: Checkout code
        uses: actions/checkout@v4.1.6
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - uses: goreleaser/goreleaser-action@v4
        with:
          distribution: goreleaser-pro
          version: latest
          args: build --single-target -f=.goreleaser/goreleaser-build.yml ${{ inputs.goreleaser_options }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GORELEASER_KEY: ${{ secrets.GORELEASER_KEY }}

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-dist
          path: dist/
          retention-days: 7

  build:
    name: Build
    needs:
      - prepare
      - prepare-linux
    runs-on: ubuntu-latest
    env:
      DOCKER_CLI_EXPERIMENTAL: "enabled"
    permissions:
      contents: read
    steps:
      - name: Maximize build space
        uses: easimon/maximize-build-space@v10
        with:
          root-reserve-mb: 32768 # The Go cache (`~/.cache/go-build` and `~/go/pkg`) requires a lot of storage space.
          remove-android: "true"
          remove-docker-images: "true"
          remove-dotnet: "true"
          remove-haskell: "true"

      - name: Install Dependences
        run: sudo apt install libpcap-dev

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Show available Docker Buildx platforms
        run: echo ${{ steps.buildx.outputs.platforms }}

      - name: Install cosign
        uses: sigstore/cosign-installer@v3.5.0

      - name: Install Syft
        uses: anchore/sbom-action/download-syft@v0.16.0

      - name: Login to ghcr.io registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout code
        uses: actions/checkout@v4.1.6
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: View Artifacts
        run: ls -al artifacts artifacts/*

      - name: Arrange Artifacts
        run: |
          mkdir -p output/build-linux_arm64/
          mkdir -p output/build-linux_amd64/
          mkdir -p output/build-darwin_arm64/
          mkdir -p output/build-linux_amd64/
          mkdir -p output/build-windows_amd64/
          mv artifacts/linux-dist/linux_arm64/build-linux_linux_arm64/* output/build-linux_arm64/
          mv artifacts/linux-dist/linux_amd64/build-linux_linux_amd64_v1/* output/build-linux_amd64/
          mv artifacts/windows-latest-dist/windows_amd64/build-windows_windows_amd64_v1/* output/build-windows_amd64/
          mv artifacts/macos-latest-dist/darwin_arm64/build-macos_darwin_arm64/* output/build-darwin_arm64/
        shell: bash

      - name: View Output
        run: ls -al output output/*

      - name: Upload Output for Debugging
        uses: actions/upload-artifact@v4
        with:
          name: output
          path: output/
          retention-days: 1

      # release
      - uses: goreleaser/goreleaser-action@v4
        if: steps.cache.outputs.cache-hit != 'true'
        with:
          distribution: goreleaser-pro
          version: latest
          args: release -f=.goreleaser/goreleaser-publish.yml ${{ inputs.goreleaser_options}}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GORELEASER_KEY: ${{ secrets.GORELEASER_KEY }}
